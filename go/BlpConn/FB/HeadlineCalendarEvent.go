// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HeadlineCalendarEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsHeadlineCalendarEvent(buf []byte, offset flatbuffers.UOffsetT) *HeadlineCalendarEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HeadlineCalendarEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishHeadlineCalendarEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHeadlineCalendarEvent(buf []byte, offset flatbuffers.UOffsetT) *HeadlineCalendarEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HeadlineCalendarEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHeadlineCalendarEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HeadlineCalendarEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HeadlineCalendarEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HeadlineCalendarEvent) IdBbGlobal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) ParsekyableDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) EventType() EventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EventType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeadlineCalendarEvent) MutateEventType(n EventType) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *HeadlineCalendarEvent) EventSubtype() EventSubType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return EventSubType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeadlineCalendarEvent) MutateEventSubtype(n EventSubType) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *HeadlineCalendarEvent) EventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HeadlineCalendarEvent) MutateEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *HeadlineCalendarEvent) ObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) ReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) ReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineCalendarEvent) ReleaseStatus() ReleaseStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return ReleaseStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeadlineCalendarEvent) MutateReleaseStatus(n ReleaseStatus) bool {
	return rcv._tab.MutateByteSlot(22, byte(n))
}

func HeadlineCalendarEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func HeadlineCalendarEventAddIdBbGlobal(builder *flatbuffers.Builder, idBbGlobal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idBbGlobal), 0)
}
func HeadlineCalendarEventAddParsekyableDes(builder *flatbuffers.Builder, parsekyableDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parsekyableDes), 0)
}
func HeadlineCalendarEventAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(description), 0)
}
func HeadlineCalendarEventAddEventType(builder *flatbuffers.Builder, eventType EventType) {
	builder.PrependByteSlot(3, byte(eventType), 0)
}
func HeadlineCalendarEventAddEventSubtype(builder *flatbuffers.Builder, eventSubtype EventSubType) {
	builder.PrependByteSlot(4, byte(eventSubtype), 0)
}
func HeadlineCalendarEventAddEventId(builder *flatbuffers.Builder, eventId int32) {
	builder.PrependInt32Slot(5, eventId, 0)
}
func HeadlineCalendarEventAddObservationPeriod(builder *flatbuffers.Builder, observationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(observationPeriod), 0)
}
func HeadlineCalendarEventAddReleaseStartDt(builder *flatbuffers.Builder, releaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(releaseStartDt), 0)
}
func HeadlineCalendarEventAddReleaseEndDt(builder *flatbuffers.Builder, releaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(releaseEndDt), 0)
}
func HeadlineCalendarEventAddReleaseStatus(builder *flatbuffers.Builder, releaseStatus ReleaseStatus) {
	builder.PrependByteSlot(9, byte(releaseStatus), 0)
}
func HeadlineCalendarEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
