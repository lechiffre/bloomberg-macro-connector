// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HeadlineEconomicEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsHeadlineEconomicEvent(buf []byte, offset flatbuffers.UOffsetT) *HeadlineEconomicEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HeadlineEconomicEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishHeadlineEconomicEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHeadlineEconomicEvent(buf []byte, offset flatbuffers.UOffsetT) *HeadlineEconomicEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HeadlineEconomicEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHeadlineEconomicEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HeadlineEconomicEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HeadlineEconomicEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HeadlineEconomicEvent) IdBbGlobal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) ParsekyableDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) EventType() EventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EventType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeadlineEconomicEvent) MutateEventType(n EventType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *HeadlineEconomicEvent) EventSubtype() EventSubType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return EventSubType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeadlineEconomicEvent) MutateEventSubtype(n EventSubType) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *HeadlineEconomicEvent) EventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HeadlineEconomicEvent) MutateEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *HeadlineEconomicEvent) ObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) ReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) ReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) Value(obj *Value) *Value {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Value)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) PriorValue(obj *Value) *Value {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Value)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) PriorEventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HeadlineEconomicEvent) MutatePriorEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *HeadlineEconomicEvent) PriorObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) PriorEconomicReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeadlineEconomicEvent) PriorEconomicReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func HeadlineEconomicEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func HeadlineEconomicEventAddIdBbGlobal(builder *flatbuffers.Builder, idBbGlobal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idBbGlobal), 0)
}
func HeadlineEconomicEventAddParsekyableDes(builder *flatbuffers.Builder, parsekyableDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parsekyableDes), 0)
}
func HeadlineEconomicEventAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(description), 0)
}
func HeadlineEconomicEventAddEventType(builder *flatbuffers.Builder, eventType EventType) {
	builder.PrependInt32Slot(3, int32(eventType), 0)
}
func HeadlineEconomicEventAddEventSubtype(builder *flatbuffers.Builder, eventSubtype EventSubType) {
	builder.PrependInt32Slot(4, int32(eventSubtype), 0)
}
func HeadlineEconomicEventAddEventId(builder *flatbuffers.Builder, eventId int32) {
	builder.PrependInt32Slot(5, eventId, 0)
}
func HeadlineEconomicEventAddObservationPeriod(builder *flatbuffers.Builder, observationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(observationPeriod), 0)
}
func HeadlineEconomicEventAddReleaseStartDt(builder *flatbuffers.Builder, releaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(releaseStartDt), 0)
}
func HeadlineEconomicEventAddReleaseEndDt(builder *flatbuffers.Builder, releaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(releaseEndDt), 0)
}
func HeadlineEconomicEventAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(value), 0)
}
func HeadlineEconomicEventAddPriorValue(builder *flatbuffers.Builder, priorValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(priorValue), 0)
}
func HeadlineEconomicEventAddPriorEventId(builder *flatbuffers.Builder, priorEventId int32) {
	builder.PrependInt32Slot(11, priorEventId, 0)
}
func HeadlineEconomicEventAddPriorObservationPeriod(builder *flatbuffers.Builder, priorObservationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(priorObservationPeriod), 0)
}
func HeadlineEconomicEventAddPriorEconomicReleaseStartDt(builder *flatbuffers.Builder, priorEconomicReleaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(priorEconomicReleaseStartDt), 0)
}
func HeadlineEconomicEventAddPriorEconomicReleaseEndDt(builder *flatbuffers.Builder, priorEconomicReleaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(priorEconomicReleaseEndDt), 0)
}
func HeadlineEconomicEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
