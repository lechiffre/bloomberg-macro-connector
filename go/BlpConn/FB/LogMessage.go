// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LogMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsLogMessage(buf []byte, offset flatbuffers.UOffsetT) *LogMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLogMessage(buf []byte, offset flatbuffers.UOffsetT) *LogMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LogMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LogMessage) LogDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LogMessage) Module() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogMessage) MutateModule(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *LogMessage) Status() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogMessage) MutateStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *LogMessage) CorrId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogMessage) MutateCorrId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *LogMessage) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LogMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func LogMessageAddLogDt(builder *flatbuffers.Builder, logDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(logDt), 0)
}
func LogMessageAddModule(builder *flatbuffers.Builder, module byte) {
	builder.PrependByteSlot(1, module, 0)
}
func LogMessageAddStatus(builder *flatbuffers.Builder, status byte) {
	builder.PrependByteSlot(2, status, 0)
}
func LogMessageAddCorrId(builder *flatbuffers.Builder, corrId uint64) {
	builder.PrependUint64Slot(3, corrId, 0)
}
func LogMessageAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(message), 0)
}
func LogMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
