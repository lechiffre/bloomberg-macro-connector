// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MacroCalendarEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsMacroCalendarEvent(buf []byte, offset flatbuffers.UOffsetT) *MacroCalendarEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MacroCalendarEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishMacroCalendarEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMacroCalendarEvent(buf []byte, offset flatbuffers.UOffsetT) *MacroCalendarEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MacroCalendarEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMacroCalendarEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MacroCalendarEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MacroCalendarEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MacroCalendarEvent) CorrId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroCalendarEvent) MutateCorrId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MacroCalendarEvent) IdBbGlobal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroCalendarEvent) ParsekyableDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroCalendarEvent) EventType() EventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EventType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MacroCalendarEvent) MutateEventType(n EventType) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *MacroCalendarEvent) EventSubtype() EventSubType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return EventSubType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MacroCalendarEvent) MutateEventSubtype(n EventSubType) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *MacroCalendarEvent) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroCalendarEvent) EventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroCalendarEvent) MutateEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *MacroCalendarEvent) ObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroCalendarEvent) ReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroCalendarEvent) ReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroCalendarEvent) ReleaseStatus() ReleaseStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return ReleaseStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MacroCalendarEvent) MutateReleaseStatus(n ReleaseStatus) bool {
	return rcv._tab.MutateByteSlot(24, byte(n))
}

func (rcv *MacroCalendarEvent) RelevanceValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MacroCalendarEvent) MutateRelevanceValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

func MacroCalendarEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func MacroCalendarEventAddCorrId(builder *flatbuffers.Builder, corrId uint64) {
	builder.PrependUint64Slot(0, corrId, 0)
}
func MacroCalendarEventAddIdBbGlobal(builder *flatbuffers.Builder, idBbGlobal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idBbGlobal), 0)
}
func MacroCalendarEventAddParsekyableDes(builder *flatbuffers.Builder, parsekyableDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(parsekyableDes), 0)
}
func MacroCalendarEventAddEventType(builder *flatbuffers.Builder, eventType EventType) {
	builder.PrependByteSlot(3, byte(eventType), 0)
}
func MacroCalendarEventAddEventSubtype(builder *flatbuffers.Builder, eventSubtype EventSubType) {
	builder.PrependByteSlot(4, byte(eventSubtype), 0)
}
func MacroCalendarEventAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(description), 0)
}
func MacroCalendarEventAddEventId(builder *flatbuffers.Builder, eventId int32) {
	builder.PrependInt32Slot(6, eventId, 0)
}
func MacroCalendarEventAddObservationPeriod(builder *flatbuffers.Builder, observationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(observationPeriod), 0)
}
func MacroCalendarEventAddReleaseStartDt(builder *flatbuffers.Builder, releaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(releaseStartDt), 0)
}
func MacroCalendarEventAddReleaseEndDt(builder *flatbuffers.Builder, releaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(releaseEndDt), 0)
}
func MacroCalendarEventAddReleaseStatus(builder *flatbuffers.Builder, releaseStatus ReleaseStatus) {
	builder.PrependByteSlot(10, byte(releaseStatus), 0)
}
func MacroCalendarEventAddRelevanceValue(builder *flatbuffers.Builder, relevanceValue float64) {
	builder.PrependFloat64Slot(11, relevanceValue, 0.0)
}
func MacroCalendarEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
