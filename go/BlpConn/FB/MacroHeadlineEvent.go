// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MacroHeadlineEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsMacroHeadlineEvent(buf []byte, offset flatbuffers.UOffsetT) *MacroHeadlineEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MacroHeadlineEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishMacroHeadlineEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMacroHeadlineEvent(buf []byte, offset flatbuffers.UOffsetT) *MacroHeadlineEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MacroHeadlineEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMacroHeadlineEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MacroHeadlineEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MacroHeadlineEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MacroHeadlineEvent) CorrId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroHeadlineEvent) MutateCorrId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MacroHeadlineEvent) EventType() EventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EventType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MacroHeadlineEvent) MutateEventType(n EventType) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *MacroHeadlineEvent) EventSubtype() EventSubType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EventSubType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MacroHeadlineEvent) MutateEventSubtype(n EventSubType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *MacroHeadlineEvent) EventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroHeadlineEvent) MutateEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *MacroHeadlineEvent) ObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroHeadlineEvent) ReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroHeadlineEvent) ReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroHeadlineEvent) PriorEventId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroHeadlineEvent) MutatePriorEventId(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *MacroHeadlineEvent) PriorObservationPeriod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroHeadlineEvent) PriorEconomicReleaseStartDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroHeadlineEvent) PriorEconomicReleaseEndDt(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MacroHeadlineEvent) Value(obj *Value) *Value {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Value)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MacroHeadlineEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func MacroHeadlineEventAddCorrId(builder *flatbuffers.Builder, corrId int64) {
	builder.PrependInt64Slot(0, corrId, 0)
}
func MacroHeadlineEventAddEventType(builder *flatbuffers.Builder, eventType EventType) {
	builder.PrependByteSlot(1, byte(eventType), 0)
}
func MacroHeadlineEventAddEventSubtype(builder *flatbuffers.Builder, eventSubtype EventSubType) {
	builder.PrependByteSlot(2, byte(eventSubtype), 0)
}
func MacroHeadlineEventAddEventId(builder *flatbuffers.Builder, eventId int32) {
	builder.PrependInt32Slot(3, eventId, 0)
}
func MacroHeadlineEventAddObservationPeriod(builder *flatbuffers.Builder, observationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(observationPeriod), 0)
}
func MacroHeadlineEventAddReleaseStartDt(builder *flatbuffers.Builder, releaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(releaseStartDt), 0)
}
func MacroHeadlineEventAddReleaseEndDt(builder *flatbuffers.Builder, releaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(releaseEndDt), 0)
}
func MacroHeadlineEventAddPriorEventId(builder *flatbuffers.Builder, priorEventId int32) {
	builder.PrependInt32Slot(7, priorEventId, 0)
}
func MacroHeadlineEventAddPriorObservationPeriod(builder *flatbuffers.Builder, priorObservationPeriod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(priorObservationPeriod), 0)
}
func MacroHeadlineEventAddPriorEconomicReleaseStartDt(builder *flatbuffers.Builder, priorEconomicReleaseStartDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(priorEconomicReleaseStartDt), 0)
}
func MacroHeadlineEventAddPriorEconomicReleaseEndDt(builder *flatbuffers.Builder, priorEconomicReleaseEndDt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(priorEconomicReleaseEndDt), 0)
}
func MacroHeadlineEventAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(value), 0)
}
func MacroHeadlineEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
