// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MacroReferenceData struct {
	_tab flatbuffers.Table
}

func GetRootAsMacroReferenceData(buf []byte, offset flatbuffers.UOffsetT) *MacroReferenceData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MacroReferenceData{}
	x.Init(buf, n+offset)
	return x
}

func FinishMacroReferenceDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMacroReferenceData(buf []byte, offset flatbuffers.UOffsetT) *MacroReferenceData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MacroReferenceData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMacroReferenceDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MacroReferenceData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MacroReferenceData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MacroReferenceData) CorrId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MacroReferenceData) MutateCorrId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MacroReferenceData) IdBbGlobal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) ParsekyableDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) IndxFreq() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) IndxUnits() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) CountryIso() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) IndxSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MacroReferenceData) SeasonalityTransformation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MacroReferenceDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func MacroReferenceDataAddCorrId(builder *flatbuffers.Builder, corrId int64) {
	builder.PrependInt64Slot(0, corrId, 0)
}
func MacroReferenceDataAddIdBbGlobal(builder *flatbuffers.Builder, idBbGlobal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idBbGlobal), 0)
}
func MacroReferenceDataAddParsekyableDes(builder *flatbuffers.Builder, parsekyableDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(parsekyableDes), 0)
}
func MacroReferenceDataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func MacroReferenceDataAddIndxFreq(builder *flatbuffers.Builder, indxFreq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(indxFreq), 0)
}
func MacroReferenceDataAddIndxUnits(builder *flatbuffers.Builder, indxUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(indxUnits), 0)
}
func MacroReferenceDataAddCountryIso(builder *flatbuffers.Builder, countryIso flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(countryIso), 0)
}
func MacroReferenceDataAddIndxSource(builder *flatbuffers.Builder, indxSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(indxSource), 0)
}
func MacroReferenceDataAddSeasonalityTransformation(builder *flatbuffers.Builder, seasonalityTransformation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(seasonalityTransformation), 0)
}
func MacroReferenceDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
