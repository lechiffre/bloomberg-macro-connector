// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FB

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Value struct {
	_tab flatbuffers.Table
}

func GetRootAsValue(buf []byte, offset flatbuffers.UOffsetT) *Value {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Value{}
	x.Init(buf, n+offset)
	return x
}

func FinishValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsValue(buf []byte, offset flatbuffers.UOffsetT) *Value {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Value{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Value) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Value) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Value) Number() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateNumber(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *Value) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *Value) Low() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateLow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *Value) High() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateHigh(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *Value) Median() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateMedian(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *Value) Average() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateAverage(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *Value) StandardDeviation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Value) MutateStandardDeviation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func ValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ValueAddNumber(builder *flatbuffers.Builder, number float64) {
	builder.PrependFloat64Slot(0, number, 0.0)
}
func ValueAddValue(builder *flatbuffers.Builder, value float64) {
	builder.PrependFloat64Slot(1, value, 0.0)
}
func ValueAddLow(builder *flatbuffers.Builder, low float64) {
	builder.PrependFloat64Slot(2, low, 0.0)
}
func ValueAddHigh(builder *flatbuffers.Builder, high float64) {
	builder.PrependFloat64Slot(3, high, 0.0)
}
func ValueAddMedian(builder *flatbuffers.Builder, median float64) {
	builder.PrependFloat64Slot(4, median, 0.0)
}
func ValueAddAverage(builder *flatbuffers.Builder, average float64) {
	builder.PrependFloat64Slot(5, average, 0.0)
}
func ValueAddStandardDeviation(builder *flatbuffers.Builder, standardDeviation float64) {
	builder.PrependFloat64Slot(6, standardDeviation, 0.0)
}
func ValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
