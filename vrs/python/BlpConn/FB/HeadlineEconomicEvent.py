# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeadlineEconomicEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeadlineEconomicEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeadlineEconomicEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HeadlineEconomicEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeadlineEconomicEvent
    def IdBbGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeadlineEconomicEvent
    def ParsekyableDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeadlineEconomicEvent
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeadlineEconomicEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # HeadlineEconomicEvent
    def EventSubtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # HeadlineEconomicEvent
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # HeadlineEconomicEvent
    def ObservationPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeadlineEconomicEvent
    def ReleaseStartDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeadlineEconomicEvent
    def ReleaseEndDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeadlineEconomicEvent
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeadlineEconomicEvent
    def PriorValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeadlineEconomicEvent
    def PriorEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HeadlineEconomicEvent
    def PriorObservationPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeadlineEconomicEvent
    def PriorEconomicReleaseStartDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HeadlineEconomicEvent
    def PriorEconomicReleaseEndDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def HeadlineEconomicEventStart(builder):
    builder.StartObject(15)

def Start(builder):
    HeadlineEconomicEventStart(builder)

def HeadlineEconomicEventAddIdBbGlobal(builder, idBbGlobal):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idBbGlobal), 0)

def AddIdBbGlobal(builder, idBbGlobal):
    HeadlineEconomicEventAddIdBbGlobal(builder, idBbGlobal)

def HeadlineEconomicEventAddParsekyableDes(builder, parsekyableDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parsekyableDes), 0)

def AddParsekyableDes(builder, parsekyableDes):
    HeadlineEconomicEventAddParsekyableDes(builder, parsekyableDes)

def HeadlineEconomicEventAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    HeadlineEconomicEventAddDescription(builder, description)

def HeadlineEconomicEventAddEventType(builder, eventType):
    builder.PrependUint8Slot(3, eventType, 0)

def AddEventType(builder, eventType):
    HeadlineEconomicEventAddEventType(builder, eventType)

def HeadlineEconomicEventAddEventSubtype(builder, eventSubtype):
    builder.PrependUint8Slot(4, eventSubtype, 0)

def AddEventSubtype(builder, eventSubtype):
    HeadlineEconomicEventAddEventSubtype(builder, eventSubtype)

def HeadlineEconomicEventAddEventId(builder, eventId):
    builder.PrependUint64Slot(5, eventId, 0)

def AddEventId(builder, eventId):
    HeadlineEconomicEventAddEventId(builder, eventId)

def HeadlineEconomicEventAddObservationPeriod(builder, observationPeriod):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(observationPeriod), 0)

def AddObservationPeriod(builder, observationPeriod):
    HeadlineEconomicEventAddObservationPeriod(builder, observationPeriod)

def HeadlineEconomicEventAddReleaseStartDt(builder, releaseStartDt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(releaseStartDt), 0)

def AddReleaseStartDt(builder, releaseStartDt):
    HeadlineEconomicEventAddReleaseStartDt(builder, releaseStartDt)

def HeadlineEconomicEventAddReleaseEndDt(builder, releaseEndDt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(releaseEndDt), 0)

def AddReleaseEndDt(builder, releaseEndDt):
    HeadlineEconomicEventAddReleaseEndDt(builder, releaseEndDt)

def HeadlineEconomicEventAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    HeadlineEconomicEventAddValue(builder, value)

def HeadlineEconomicEventAddPriorValue(builder, priorValue):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(priorValue), 0)

def AddPriorValue(builder, priorValue):
    HeadlineEconomicEventAddPriorValue(builder, priorValue)

def HeadlineEconomicEventAddPriorEventId(builder, priorEventId):
    builder.PrependInt32Slot(11, priorEventId, 0)

def AddPriorEventId(builder, priorEventId):
    HeadlineEconomicEventAddPriorEventId(builder, priorEventId)

def HeadlineEconomicEventAddPriorObservationPeriod(builder, priorObservationPeriod):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(priorObservationPeriod), 0)

def AddPriorObservationPeriod(builder, priorObservationPeriod):
    HeadlineEconomicEventAddPriorObservationPeriod(builder, priorObservationPeriod)

def HeadlineEconomicEventAddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(priorEconomicReleaseStartDt), 0)

def AddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt):
    HeadlineEconomicEventAddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt)

def HeadlineEconomicEventAddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(priorEconomicReleaseEndDt), 0)

def AddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt):
    HeadlineEconomicEventAddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt)

def HeadlineEconomicEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return HeadlineEconomicEventEnd(builder)
