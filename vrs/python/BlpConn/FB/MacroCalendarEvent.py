# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MacroCalendarEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MacroCalendarEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMacroCalendarEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MacroCalendarEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MacroCalendarEvent
    def CorrId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MacroCalendarEvent
    def IdBbGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroCalendarEvent
    def ParsekyableDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroCalendarEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MacroCalendarEvent
    def EventSubtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MacroCalendarEvent
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroCalendarEvent
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MacroCalendarEvent
    def ObservationPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroCalendarEvent
    def ReleaseStartDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroCalendarEvent
    def ReleaseEndDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroCalendarEvent
    def ReleaseStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MacroCalendarEvent
    def RelevanceValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def MacroCalendarEventStart(builder):
    builder.StartObject(12)

def Start(builder):
    MacroCalendarEventStart(builder)

def MacroCalendarEventAddCorrId(builder, corrId):
    builder.PrependInt64Slot(0, corrId, 0)

def AddCorrId(builder, corrId):
    MacroCalendarEventAddCorrId(builder, corrId)

def MacroCalendarEventAddIdBbGlobal(builder, idBbGlobal):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idBbGlobal), 0)

def AddIdBbGlobal(builder, idBbGlobal):
    MacroCalendarEventAddIdBbGlobal(builder, idBbGlobal)

def MacroCalendarEventAddParsekyableDes(builder, parsekyableDes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parsekyableDes), 0)

def AddParsekyableDes(builder, parsekyableDes):
    MacroCalendarEventAddParsekyableDes(builder, parsekyableDes)

def MacroCalendarEventAddEventType(builder, eventType):
    builder.PrependUint8Slot(3, eventType, 0)

def AddEventType(builder, eventType):
    MacroCalendarEventAddEventType(builder, eventType)

def MacroCalendarEventAddEventSubtype(builder, eventSubtype):
    builder.PrependUint8Slot(4, eventSubtype, 0)

def AddEventSubtype(builder, eventSubtype):
    MacroCalendarEventAddEventSubtype(builder, eventSubtype)

def MacroCalendarEventAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    MacroCalendarEventAddDescription(builder, description)

def MacroCalendarEventAddEventId(builder, eventId):
    builder.PrependInt32Slot(6, eventId, 0)

def AddEventId(builder, eventId):
    MacroCalendarEventAddEventId(builder, eventId)

def MacroCalendarEventAddObservationPeriod(builder, observationPeriod):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(observationPeriod), 0)

def AddObservationPeriod(builder, observationPeriod):
    MacroCalendarEventAddObservationPeriod(builder, observationPeriod)

def MacroCalendarEventAddReleaseStartDt(builder, releaseStartDt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(releaseStartDt), 0)

def AddReleaseStartDt(builder, releaseStartDt):
    MacroCalendarEventAddReleaseStartDt(builder, releaseStartDt)

def MacroCalendarEventAddReleaseEndDt(builder, releaseEndDt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(releaseEndDt), 0)

def AddReleaseEndDt(builder, releaseEndDt):
    MacroCalendarEventAddReleaseEndDt(builder, releaseEndDt)

def MacroCalendarEventAddReleaseStatus(builder, releaseStatus):
    builder.PrependUint8Slot(10, releaseStatus, 0)

def AddReleaseStatus(builder, releaseStatus):
    MacroCalendarEventAddReleaseStatus(builder, releaseStatus)

def MacroCalendarEventAddRelevanceValue(builder, relevanceValue):
    builder.PrependFloat64Slot(11, relevanceValue, 0.0)

def AddRelevanceValue(builder, relevanceValue):
    MacroCalendarEventAddRelevanceValue(builder, relevanceValue)

def MacroCalendarEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return MacroCalendarEventEnd(builder)
