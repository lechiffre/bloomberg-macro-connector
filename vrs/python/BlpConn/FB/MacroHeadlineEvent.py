# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MacroHeadlineEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MacroHeadlineEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMacroHeadlineEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MacroHeadlineEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MacroHeadlineEvent
    def CorrId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MacroHeadlineEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MacroHeadlineEvent
    def EventSubtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MacroHeadlineEvent
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MacroHeadlineEvent
    def ObservationPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroHeadlineEvent
    def ReleaseStartDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroHeadlineEvent
    def ReleaseEndDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroHeadlineEvent
    def PriorEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MacroHeadlineEvent
    def PriorObservationPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroHeadlineEvent
    def PriorEconomicReleaseStartDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroHeadlineEvent
    def PriorEconomicReleaseEndDt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.DateTime import DateTime
            obj = DateTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MacroHeadlineEvent
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from BlpConn.FB.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MacroHeadlineEventStart(builder):
    builder.StartObject(12)

def Start(builder):
    MacroHeadlineEventStart(builder)

def MacroHeadlineEventAddCorrId(builder, corrId):
    builder.PrependInt64Slot(0, corrId, 0)

def AddCorrId(builder, corrId):
    MacroHeadlineEventAddCorrId(builder, corrId)

def MacroHeadlineEventAddEventType(builder, eventType):
    builder.PrependUint8Slot(1, eventType, 0)

def AddEventType(builder, eventType):
    MacroHeadlineEventAddEventType(builder, eventType)

def MacroHeadlineEventAddEventSubtype(builder, eventSubtype):
    builder.PrependUint8Slot(2, eventSubtype, 0)

def AddEventSubtype(builder, eventSubtype):
    MacroHeadlineEventAddEventSubtype(builder, eventSubtype)

def MacroHeadlineEventAddEventId(builder, eventId):
    builder.PrependInt32Slot(3, eventId, 0)

def AddEventId(builder, eventId):
    MacroHeadlineEventAddEventId(builder, eventId)

def MacroHeadlineEventAddObservationPeriod(builder, observationPeriod):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(observationPeriod), 0)

def AddObservationPeriod(builder, observationPeriod):
    MacroHeadlineEventAddObservationPeriod(builder, observationPeriod)

def MacroHeadlineEventAddReleaseStartDt(builder, releaseStartDt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(releaseStartDt), 0)

def AddReleaseStartDt(builder, releaseStartDt):
    MacroHeadlineEventAddReleaseStartDt(builder, releaseStartDt)

def MacroHeadlineEventAddReleaseEndDt(builder, releaseEndDt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(releaseEndDt), 0)

def AddReleaseEndDt(builder, releaseEndDt):
    MacroHeadlineEventAddReleaseEndDt(builder, releaseEndDt)

def MacroHeadlineEventAddPriorEventId(builder, priorEventId):
    builder.PrependInt32Slot(7, priorEventId, 0)

def AddPriorEventId(builder, priorEventId):
    MacroHeadlineEventAddPriorEventId(builder, priorEventId)

def MacroHeadlineEventAddPriorObservationPeriod(builder, priorObservationPeriod):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(priorObservationPeriod), 0)

def AddPriorObservationPeriod(builder, priorObservationPeriod):
    MacroHeadlineEventAddPriorObservationPeriod(builder, priorObservationPeriod)

def MacroHeadlineEventAddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(priorEconomicReleaseStartDt), 0)

def AddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt):
    MacroHeadlineEventAddPriorEconomicReleaseStartDt(builder, priorEconomicReleaseStartDt)

def MacroHeadlineEventAddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(priorEconomicReleaseEndDt), 0)

def AddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt):
    MacroHeadlineEventAddPriorEconomicReleaseEndDt(builder, priorEconomicReleaseEndDt)

def MacroHeadlineEventAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    MacroHeadlineEventAddValue(builder, value)

def MacroHeadlineEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return MacroHeadlineEventEnd(builder)
