# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MacroReferenceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MacroReferenceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMacroReferenceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MacroReferenceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MacroReferenceData
    def CorrId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MacroReferenceData
    def IdBbGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def ParsekyableDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def IndxFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def IndxUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def CountryIso(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def IndxSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MacroReferenceData
    def SeasonalityTransformation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MacroReferenceDataStart(builder):
    builder.StartObject(9)

def Start(builder):
    MacroReferenceDataStart(builder)

def MacroReferenceDataAddCorrId(builder, corrId):
    builder.PrependInt64Slot(0, corrId, 0)

def AddCorrId(builder, corrId):
    MacroReferenceDataAddCorrId(builder, corrId)

def MacroReferenceDataAddIdBbGlobal(builder, idBbGlobal):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idBbGlobal), 0)

def AddIdBbGlobal(builder, idBbGlobal):
    MacroReferenceDataAddIdBbGlobal(builder, idBbGlobal)

def MacroReferenceDataAddParsekyableDes(builder, parsekyableDes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parsekyableDes), 0)

def AddParsekyableDes(builder, parsekyableDes):
    MacroReferenceDataAddParsekyableDes(builder, parsekyableDes)

def MacroReferenceDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    MacroReferenceDataAddDescription(builder, description)

def MacroReferenceDataAddIndxFreq(builder, indxFreq):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(indxFreq), 0)

def AddIndxFreq(builder, indxFreq):
    MacroReferenceDataAddIndxFreq(builder, indxFreq)

def MacroReferenceDataAddIndxUnits(builder, indxUnits):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(indxUnits), 0)

def AddIndxUnits(builder, indxUnits):
    MacroReferenceDataAddIndxUnits(builder, indxUnits)

def MacroReferenceDataAddCountryIso(builder, countryIso):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(countryIso), 0)

def AddCountryIso(builder, countryIso):
    MacroReferenceDataAddCountryIso(builder, countryIso)

def MacroReferenceDataAddIndxSource(builder, indxSource):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(indxSource), 0)

def AddIndxSource(builder, indxSource):
    MacroReferenceDataAddIndxSource(builder, indxSource)

def MacroReferenceDataAddSeasonalityTransformation(builder, seasonalityTransformation):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(seasonalityTransformation), 0)

def AddSeasonalityTransformation(builder, seasonalityTransformation):
    MacroReferenceDataAddSeasonalityTransformation(builder, seasonalityTransformation)

def MacroReferenceDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return MacroReferenceDataEnd(builder)
