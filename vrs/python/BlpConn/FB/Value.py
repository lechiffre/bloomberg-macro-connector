# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Value(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Value()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Value
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Value
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def Low(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def High(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def Median(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def Average(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def StandardDeviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ValueStart(builder):
    builder.StartObject(7)

def Start(builder):
    ValueStart(builder)

def ValueAddNumber(builder, number):
    builder.PrependFloat64Slot(0, number, 0.0)

def AddNumber(builder, number):
    ValueAddNumber(builder, number)

def ValueAddValue(builder, value):
    builder.PrependFloat64Slot(1, value, 0.0)

def AddValue(builder, value):
    ValueAddValue(builder, value)

def ValueAddLow(builder, low):
    builder.PrependFloat64Slot(2, low, 0.0)

def AddLow(builder, low):
    ValueAddLow(builder, low)

def ValueAddHigh(builder, high):
    builder.PrependFloat64Slot(3, high, 0.0)

def AddHigh(builder, high):
    ValueAddHigh(builder, high)

def ValueAddMedian(builder, median):
    builder.PrependFloat64Slot(4, median, 0.0)

def AddMedian(builder, median):
    ValueAddMedian(builder, median)

def ValueAddAverage(builder, average):
    builder.PrependFloat64Slot(5, average, 0.0)

def AddAverage(builder, average):
    ValueAddAverage(builder, average)

def ValueAddStandardDeviation(builder, standardDeviation):
    builder.PrependFloat64Slot(6, standardDeviation, 0.0)

def AddStandardDeviation(builder, standardDeviation):
    ValueAddStandardDeviation(builder, standardDeviation)

def ValueEnd(builder):
    return builder.EndObject()

def End(builder):
    return ValueEnd(builder)
