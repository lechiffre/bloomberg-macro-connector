# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Message

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Distribution(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Distribution()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDistribution(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Distribution
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Distribution
    def Low(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Distribution
    def High(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Distribution
    def Median(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Distribution
    def Average(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Distribution
    def StandardDeviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Distribution
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def DistributionStart(builder):
    builder.StartObject(6)

def Start(builder):
    DistributionStart(builder)

def DistributionAddLow(builder, low):
    builder.PrependFloat32Slot(0, low, 0.0)

def AddLow(builder, low):
    DistributionAddLow(builder, low)

def DistributionAddHigh(builder, high):
    builder.PrependFloat32Slot(1, high, 0.0)

def AddHigh(builder, high):
    DistributionAddHigh(builder, high)

def DistributionAddMedian(builder, median):
    builder.PrependFloat32Slot(2, median, 0.0)

def AddMedian(builder, median):
    DistributionAddMedian(builder, median)

def DistributionAddAverage(builder, average):
    builder.PrependFloat32Slot(3, average, 0.0)

def AddAverage(builder, average):
    DistributionAddAverage(builder, average)

def DistributionAddStandardDeviation(builder, standardDeviation):
    builder.PrependFloat32Slot(4, standardDeviation, 0.0)

def AddStandardDeviation(builder, standardDeviation):
    DistributionAddStandardDeviation(builder, standardDeviation)

def DistributionAddNumber(builder, number):
    builder.PrependFloat32Slot(5, number, 0.0)

def AddNumber(builder, number):
    DistributionAddNumber(builder, number)

def DistributionEnd(builder):
    return builder.EndObject()

def End(builder):
    return DistributionEnd(builder)
