# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Message

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Single(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Single()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSingle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Single
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Single
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SingleStart(builder):
    builder.StartObject(1)

def Start(builder):
    SingleStart(builder)

def SingleAddNumber(builder, number):
    builder.PrependFloat32Slot(0, number, 0.0)

def AddNumber(builder, number):
    SingleAddNumber(builder, number)

def SingleEnd(builder):
    return builder.EndObject()

def End(builder):
    return SingleEnd(builder)
